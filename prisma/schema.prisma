// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  provider      Provider?
  bookings      Booking[]
  reviews       Review[]
}

enum UserRole {
  ADMIN
  CUSTOMER
  PROVIDER
}

model Provider {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  phone         String
  experience    Int
  serviceTypeId String
  serviceType   Service  @relation(fields: [serviceTypeId], references: [id])
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  bookings      Booking[]
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  basePrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  providers   Provider[]
  bookings    Booking[]
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  providerId  String
  provider    Provider      @relation(fields: [providerId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  status      BookingStatus @default(PENDING)
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  totalPrice  Float
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  review      Review?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
